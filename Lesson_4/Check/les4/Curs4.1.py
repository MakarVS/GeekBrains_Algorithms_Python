# -*- coding: utf-8 -*-
# Проанализировать скорость и сложность одного любого алгоритма, разработанных в рамках домашнего задания первых трёх уроков. 
# Примечание: попробуйте написать несколько реализаций алгоритма и сравнить их
import timeit
# В диапазоне натуральных чисел от 2 до 99 определить, сколько из них кратны каждому из чисел в диапазоне от 2 до 9.
# Три реализации одного и того-же кода.
def code1():
	result = [0] * 8
	for i in range(2, 100):
		for j in range(2, 10):
			if i % j == 0:
				result[j - 2] += 1
	i = 0
def code2():
	z=[99//i for i in range(2, 10)]
k=0
n=0
def code3():
	for i in range(2,99):
		if n == 0:
			for l in range(2,9):
				if not i%l:
					x='число {} кратно {}'.format(i,l)
time1=float('{:.6f}'.format(timeit.timeit(code1,number=1)))
time2=float('{:.6f}'.format(timeit.timeit(code2,number=1)))
time3=float('{:.6f}'.format(timeit.timeit(code3,number=1)))
time4=time1/time2
time5=time3/time2
print('Второй алгоритм является самым быстрым, его скорость составляет {},\nчто в {} раз(а) быстрее по сравнению с первым,\nи в {} раз(а) по сравнению с третьим.'.format(time2,time4,time5))
# Такая скорость связана с тем, что второй алгоритм реализован как генератор реализованный внутри массива.
