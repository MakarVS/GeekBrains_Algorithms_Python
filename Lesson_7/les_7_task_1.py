""" 
Задача № 1.
Отсортируйте по убыванию методом пузырька одномерный целочисленный массив, заданный случайными числами
на промежутке [-100; 100). Выведите на экран исходный и отсортированный массивы.
Примечания:
a. алгоритм сортировки должен быть в виде функции, которая принимает на вход массив данных,
b. постарайтесь сделать алгоритм умнее, но помните, что у вас должна остаться сортировка пузырьком. 
Улучшенные версии сортировки, например, расчёской, шейкерная и другие в зачёт не идут.
"""

from random import randint


n = 10
array = [randint(-100, 99) for _ in range(n)]
print(f'Изначальный массив - {array}')


def sort_bubble(array, inter=False, reverse=True):
    """
    Улучшенная сортировка пузырьком с возможностью выбора реверса сортировки. Вариант сортировки, представленной в
    лекции может лишние разы пробегать массив просто так. Чтобы проверить это - подайте на вход сортировке из лекции
    уже отсортированный массив и выведите промежуточные массивы. Улучшение же заключается в досрочном прекращении
    алгоритма при достижении сортировки.
    :param array: массив
    :param inter: флаг для вывода промежуточных массивов, по-умолчанию промежуточные массивы не выводятся
    :param reverse: флаг реверса сортировки, по-умолчинаю по убыванию
    :return: отсортированный массив
    """

    m = 1
    if inter:
        print('Промежуточные массивы:')

    while m < len(array):
        flag_not_replacement = True

        for i in range(len(array)-m):
            if array[i] > array[i+1]:
                array[i], array[i+1] = array[i+1], array[i]
                flag_not_replacement = False

        if flag_not_replacement:
            break
        if inter:
            print(array)
        m += 1

    if reverse:
        for i in range(len(array) // 2):
            array[i], array[len(array)-i-1] = array[len(array)-i-1], array[i]

    return array


print(f'Отсортированный массив - {sort_bubble(array)}')
